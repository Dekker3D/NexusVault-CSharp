using NUnit.Framework;

namespace NexusVault.Test.Jpg.Tex
{
    class Sampler
    {
        [Test]
        public void Upsample()
        {
            var input = new int[] { //
				0x01, 0x02, 0x03, 0x04, //
				0x05, 0x06, 0x07, 0x08, //
				0x09, 0x0A, 0x0B, 0x0C, //
				0x0D, 0x0E, 0x0F, 0x10, //
		    };

            var output = new int[input.Length * 4];

            NexusVault.Format.Tex.Jpg.Sampler.Upsample(input, 0, 4, 4, 4, 2, output, 0, 8);

            var expected = new int[] { //
				0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, //
				0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, //
				0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x08, 0x08, //
				0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x08, 0x08, //
				0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, //
				0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, //
				0x0D, 0x0D, 0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, //
				0x0D, 0x0D, 0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, //
		    };

            Assert.AreEqual(expected, output);
        }


        [Test]
        public void Upsample_Inplace()
        {
            var input = new int[] { //
				0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, //
				0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, //
				0x09, 0x0A, 0x0B, 0x0C, 0x00, 0x00, 0x00, 0x00, //
				0x0D, 0x0E, 0x0F, 0x10, 0x00, 0x00, 0x00, 0x00, //
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
		};

            NexusVault.Format.Tex.Jpg.Sampler.Upsample(input, 0, 4, 4, 8, 2, input, 0, 8);

            var expected = new int[] { //
				0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, //
				0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, //
				0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x08, 0x08, //
				0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x08, 0x08, //
				0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, //
				0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, //
				0x0D, 0x0D, 0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, //
				0x0D, 0x0D, 0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, //
		};

            Assert.AreEqual(expected, input);
        }

        [Test]
        public void Downsample()
        {
            var input = new int[] { //
				0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, //
				0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, //
				0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x08, 0x08, //
				0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x08, 0x08, //
				0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, //
				0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, //
				0x0D, 0x0D, 0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, //
				0x0D, 0x0D, 0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, //
		};

            var output = new int[input.Length / 4];
            NexusVault.Format.Tex.Jpg.Sampler.Downsample(input, 0, 8, 8, 8, 2, output, 0, 4);

            var expected = new int[] { //
				0x01, 0x02, 0x03, 0x04, //
				0x05, 0x06, 0x07, 0x08, //
				0x09, 0x0A, 0x0B, 0x0C, //
				0x0D, 0x0E, 0x0F, 0x10, //
		};

            Assert.AreEqual(expected, output);
        }

        [Test]
        public void Downsample_Inplace()
        {
            var input = new int[] { //
				0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, //
				0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, //
				0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x08, 0x08, //
				0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x08, 0x08, //
				0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, //
				0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, //
				0x0D, 0x0D, 0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, //
				0x0D, 0x0D, 0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, //
		};

            NexusVault.Format.Tex.Jpg.Sampler.Downsample(input, 0, 8, 8, 8, 2, input, 0, 8);

            var expected = new int[] { //
				0x01, 0x02, 0x03, 0x04, 0x03, 0x03, 0x04, 0x04, //
				0x05, 0x06, 0x07, 0x08, 0x03, 0x03, 0x04, 0x04, //
				0x09, 0x0A, 0x0B, 0x0C, 0x07, 0x07, 0x08, 0x08, //
				0x0D, 0x0E, 0x0F, 0x10, 0x07, 0x07, 0x08, 0x08, //
				0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, //
				0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, //
				0x0D, 0x0D, 0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, //
				0x0D, 0x0D, 0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, //
		};

            Assert.AreEqual(expected, input);
        }

    }
}
